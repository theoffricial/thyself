// serverless.base.ts is not under the project, so tsc yells in editor,
// But serverless framework under-the-hood uses ts-node that resolves serverless.ts with all its modules.
// @ts-ignore
import baseServerlessConfig from '../../serverless.base';
import type { Serverless } from 'serverless/aws';
<% if (bundler === 'esbuild') { %>
import type { WatchOptions } from 'chokidar';
<% } %>

<% if (bundler === 'esbuild' || bundler === 'webpack') { %>
import * as os from "node:os";
<% } %>

const serverlessConfiguration = <Serverless>{
  ...baseServerlessConfig,
  service: '<%= name %>',
  plugins: [
    // make sure that your bundler plugin precedes `serverless-offline` as the order is important.
    <% if (bundler === 'esbuild') { %>
    /** @link https://www.npmjs.com/package/serverless-esbuild */
    'serverless-esbuild', 
    /** @link https://www.npmjs.com/package/serverless-webpack */
    <% } else if (bundler === 'webpack') { %>
    'serverless-webpack',
    <% } else if (bundler === 'tsc') { %>
    /** 
     * @link https://www.npmjs.com/package/serverless-plugin-typescript 
     */
    'serverless-plugin-typescript',
    <% } %>
    'serverless-offline',
    /** 
     * this should go before serverless-plugin-include-dependencies if added
     * @link https://www.npmjs.com/package/serverless-plugin-common-excludes
     */
    'serverless-plugin-common-excludes',
  ],
  package: {
    /**
     * This will switch the plugin to per function packaging.
     * The individual packaging needs more time at the packaging phase, but you'll get that paid back twice at runtime.
     */
    individually: true,
    excludeDevDependencies: true,
    <% if (bundler === 'webpack') { %>
    // webpack.config.ts takes care of file inclusion
    include: [],
    // webpack.config.ts takes care of file exclusion
    exclude: ['node_modules/@aws-sdk/**',],
    <% } else if (bundler === 'webpack') { %>
    include: [],
    exclude: [],
    <% } else if (bundler === 'tsc') { %>
    include: [],
    exclude: [],
    <% } %>
    /** 
     * The AWS Lambda execution environment contains a number of libraries such as the AWS SDK for 
     * the Node.js and Python runtimes (a full list can be found here: Lambda runtimes).
     * @link https://docs.aws.amazon.com/lambda/latest/dg/best-practices.html#function-code
     */
    patterns: ['!.git/**', 'src/**', '!node_modules/@aws-sdk/**']
  },
  custom: {
    <% if (bundler === 'esbuild') { %>
    /** The serverless-esbuild transpilation and hot-reloading steps are not perfectly synchronized,
     * That might lead that breakpoints on code changes will require 2 triggering to be catches while debugging.
     */
    esbuild: {
      /** @link https://www.npmjs.com/package/serverless-esbuild#advanced-configuration */
      config: 'esbuild.config.ts',
      /**
       * The number of concurrent zip and bundle operations to run at once (This can be memory intensive).
       * 5 should be relatively a good number
       */
      concurrency: 5 || os.cpus().length,
      /**
       * Disables the use of esbuild incremental compilation.
       */
      disableIncremental: false,
      packager: '<%= packageManager %>',
      /** @link https://www.npmjs.com/package/serverless-esbuild#watch-options */
      watch: {
        pattern: ['src/**/*.ts'],
        ignore: ['.esbuild', 'dist', 'node_modules', '.build'],
        chokidar: { ignoreInitial: true } as WatchOptions,
      } 
    },
    <% } else if (bundler === 'webpack') { %>
    /** @link https://www.serverless.com/plugins/serverless-webpack */ 
    webpack: {
      /** 
        * Name of webpack configuration file
        * @link https://www.serverless.com/plugins/serverless-webpack#configure
        */
      webpackConfig: 'webpack.config.ts',
      /**
        * Packager that will be used to package your external modules
        * @link https://www.serverless.com/plugins/serverless-webpack#packagers
        */
      packager: '<%= packageManager %>',
      /**
        * enable auto-packing of external modules
        * By default, the plugin will try to bundle all dependencies. However, you don't want to include all modules in some cases such as selectively import, excluding builtin package (ie: aws-sdk) and handling webpack-incompatible modules.
        * @link https://www.serverless.com/plugins/serverless-webpack#aws-sdk
        */
      includeModules: true,
      /**
        * 
        * 5 is desired concurrency, defaults to the number of available cores
        * @link https://www.serverless.com/plugins/serverless-webpack#individual-packaging-concurrency
        */
      concurrency: 5 || os.cpus().length,
      /**
        * Exclude files that match a glob from function resolution
        * @link https://www.serverless.com/plugins/serverless-webpack#exclude-files-with-similar-names
        */
      excludeFiles: '**/{node_modules,__mocks__,__tests__,.serverless,.webpack,.webpackCache,.husky,.github,.jest,.vscode}',
      /**
        * Matches filenames based on two criteria:
        *
        * 1. Directory Exclusion: Matches any file within specific directories
        *    (including subdirectories) OR
        * 2. File Extension: Matches any file ending with specific extensions
        *    (.spec.js, .spec.ts, .test.js, .test.ts).
        *
        * @link https://www.serverless.com/plugins/serverless-webpack#exclude-files-with-regular-expression
        */
      excludeRegex: '^(?:__mocks__|__tests__|node_modules|.serverless|.webpack|.webpackCache|.husky|.github|.jest|.vscode)/.*|.*?\.(?:spec|test)\.(?:js|ts)$',
    },
    <% } %>
    /** @link https://www.npmjs.com/package/serverless-offline#usage-and-command-line-options */
    'serverless-offline': {
      /** @link https://www.npmjs.com/package/serverless-offline#notimeout */
      noTimeout: true,
      /** @link https://www.npmjs.com/package/serverless-offline#reloadhandler */
      reloadHandler: true,
      /** @link https://www.npmjs.com/package/serverless-offline#noprependstageinurl */
      noPrependStageInUrl: true,
      /** @link https://www.npmjs.com/package/serverless-offline#noauth */
      noAuth: true,
      /** @link https://www.npmjs.com/package/serverless-offline#httpport */
      httpPort: 3000,
      /** @link https://www.npmjs.com/package/serverless-offline#lambdaport */
      lambdaPort: 3002,
    }
  },
  functions: {
    hello: {
      handler: 'src/handler.hello',
      events: [
        {
          http: {
            method: 'get',
            path: 'hello',
          },
        },
      ],
    },
  },
};

// serverless.base.ts is not under the project, so tsc yells in editor,
// But serverless framework under-the-hood uses ts-node that resolves serverless.ts with all its modules.
// @ts-ignore
export = serverlessConfiguration;
